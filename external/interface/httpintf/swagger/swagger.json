{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The purpose of this application is to provide API over HTTP to toggler service,\nin which you can interact with the service in a programmatic way.",
    "title": "provides API on HTTP layer to the toggler service.",
    "termsOfService": "there are no TOS at this moment, use at your own risk we take no responsibility",
    "version": "0.2.0"
  },
  "basePath": "/api",
  "paths": {
    "/deployment-environments": {
      "get": {
        "security": [
          {
            "AppToken": [
              "[]"
            ]
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "deployment"
        ],
        "summary": "List all the deployment environment that can be used to manage a feature rollout.",
        "operationId": "listDeploymentEnvironments",
        "responses": {
          "200": {
            "$ref": "#/responses/listDeploymentEnvironmentResponse"
          },
          "401": {
            "$ref": "#/responses/errorResponse"
          },
          "500": {
            "$ref": "#/responses/errorResponse"
          }
        }
      },
      "post": {
        "security": [
          {
            "AppToken": [
              "[]"
            ]
          }
        ],
        "description": "This operation allows you to create a new deployment environment.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "deployment"
        ],
        "summary": "Create a deployment environment that can be used for managing a feature rollout.",
        "operationId": "createDeploymentEnvironment",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "environment": {
                  "$ref": "#/definitions/Environment"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/createDeploymentEnvironmentResponse"
          },
          "400": {
            "$ref": "#/responses/errorResponse"
          },
          "401": {
            "$ref": "#/responses/errorResponse"
          },
          "500": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/deployment-environments/{envID}": {
      "put": {
        "security": [
          {
            "AppToken": [
              "[]"
            ]
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "deployment"
        ],
        "summary": "Update a deployment environment.",
        "operationId": "updateDeploymentEnvironment",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "EnvironmentID",
            "description": "EnvironmentID is the deployment environment id or the alias name.",
            "name": "envID",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "environment": {
                  "$ref": "#/definitions/Environment"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/updateDeploymentEnvironmentResponse"
          },
          "400": {
            "$ref": "#/responses/errorResponse"
          },
          "500": {
            "$ref": "#/responses/errorResponse"
          }
        }
      },
      "delete": {
        "security": [
          {
            "AppToken": [
              "[]"
            ]
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "deployment"
        ],
        "summary": "Delete a deployment environment.",
        "operationId": "deleteDeploymentEnvironment",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "EnvironmentID",
            "description": "EnvironmentID is the deployment environment id or the alias name.",
            "name": "envID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/deleteDeploymentEnvironmentResponse"
          },
          "400": {
            "$ref": "#/responses/errorResponse"
          },
          "500": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/release-flags": {
      "get": {
        "security": [
          {
            "AppToken": [
              "[]"
            ]
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "flag"
        ],
        "summary": "List all the release flag that can be used to manage a feature rollout.",
        "operationId": "listReleaseFlags",
        "responses": {
          "200": {
            "$ref": "#/responses/listReleaseFlagResponse"
          },
          "401": {
            "$ref": "#/responses/errorResponse"
          },
          "500": {
            "$ref": "#/responses/errorResponse"
          }
        }
      },
      "post": {
        "security": [
          {
            "AppToken": [
              "[]"
            ]
          }
        ],
        "description": "This operation allows you to create a new release flag.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "flag"
        ],
        "summary": "Create a release flag that can be used for managing a feature rollout.",
        "operationId": "createReleaseFlag",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "flag": {
                  "$ref": "#/definitions/Flag"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/createReleaseFlagResponse"
          },
          "400": {
            "$ref": "#/responses/errorResponse"
          },
          "401": {
            "$ref": "#/responses/errorResponse"
          },
          "500": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/release-flags/{flagID}": {
      "put": {
        "security": [
          {
            "AppToken": [
              "[]"
            ]
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "flag"
        ],
        "summary": "Update a release flag.",
        "operationId": "updateReleaseFlag",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "FlagID",
            "description": "FlagID is the release flag id or the alias name.",
            "name": "flagID",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "flag": {
                  "$ref": "#/definitions/Flag"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/updateReleaseFlagResponse"
          },
          "400": {
            "$ref": "#/responses/errorResponse"
          },
          "500": {
            "$ref": "#/responses/errorResponse"
          }
        }
      },
      "delete": {
        "security": [
          {
            "AppToken": [
              "[]"
            ]
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "flag"
        ],
        "summary": "Delete a release flag.",
        "operationId": "deleteReleaseFlag",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "FlagID",
            "description": "FlagID is the release flag id or the alias name.",
            "name": "flagID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/deleteReleaseFlagResponse"
          },
          "400": {
            "$ref": "#/responses/errorResponse"
          },
          "500": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/release-pilots": {
      "get": {
        "security": [
          {
            "AppToken": [
              "[]"
            ]
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "pilot"
        ],
        "summary": "List all the release flag that can be used to manage a feature rollout.",
        "operationId": "listReleasePilots",
        "responses": {
          "200": {
            "$ref": "#/responses/listReleasePilotResponse"
          },
          "401": {
            "$ref": "#/responses/errorResponse"
          },
          "500": {
            "$ref": "#/responses/errorResponse"
          }
        }
      },
      "post": {
        "security": [
          {
            "AppToken": [
              "[]"
            ]
          }
        ],
        "description": "This operation allows you to create a new release flag.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "pilot"
        ],
        "summary": "Create a release flag that can be used for managing a feature rollout.",
        "operationId": "createReleasePilot",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "pilot": {
                  "$ref": "#/definitions/Pilot"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/createReleasePilotResponse"
          },
          "400": {
            "$ref": "#/responses/errorResponse"
          },
          "401": {
            "$ref": "#/responses/errorResponse"
          },
          "500": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/release-pilots/{pilotID}": {
      "put": {
        "security": [
          {
            "AppToken": [
              "[]"
            ]
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "pilot"
        ],
        "summary": "Update a release flag.",
        "operationId": "updateReleasePilot",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "PilotID",
            "description": "PilotID is the pilot id.",
            "name": "pilotID",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "pilot": {
                  "$ref": "#/definitions/Pilot"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/updateReleasePilotResponse"
          },
          "400": {
            "$ref": "#/responses/errorResponse"
          },
          "500": {
            "$ref": "#/responses/errorResponse"
          }
        }
      },
      "delete": {
        "security": [
          {
            "AppToken": [
              "[]"
            ]
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "pilot"
        ],
        "summary": "Delete a release pilot.",
        "operationId": "deleteReleasePilot",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "PilotID",
            "description": "PilotID is the pilot id.",
            "name": "pilotID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/deleteReleasePilotResponse"
          },
          "400": {
            "$ref": "#/responses/errorResponse"
          },
          "500": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/release-rollouts": {
      "get": {
        "security": [
          {
            "AppToken": [
              "[]"
            ]
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "rollout"
        ],
        "summary": "List all the release flag that can be used to manage a feature rollout.",
        "operationId": "listReleaseRollouts",
        "responses": {
          "200": {
            "$ref": "#/responses/listReleaseRolloutResponse"
          },
          "401": {
            "$ref": "#/responses/errorResponse"
          },
          "500": {
            "$ref": "#/responses/errorResponse"
          }
        }
      },
      "post": {
        "security": [
          {
            "AppToken": [
              "[]"
            ]
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "rollout"
        ],
        "summary": "This operation allows you to create a new release rollout.",
        "operationId": "createReleaseRollout",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "rollout": {
                  "type": "object",
                  "required": [
                    "plan"
                  ],
                  "properties": {
                    "env_id": {
                      "type": "string",
                      "x-go-name": "EnvironmentID"
                    },
                    "flag_id": {
                      "type": "string",
                      "x-go-name": "FlagID"
                    },
                    "plan": {
                      "description": "Plan holds the composited rule set about the pilot participation decision logic.",
                      "type": "object",
                      "x-go-name": "Plan",
                      "example": {
                        "percentage": 42,
                        "seed": 10240,
                        "type": "percentage"
                      }
                    }
                  },
                  "x-go-name": "Rollout"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/createReleaseRolloutResponse"
          },
          "400": {
            "$ref": "#/responses/errorResponse"
          },
          "401": {
            "$ref": "#/responses/errorResponse"
          },
          "500": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/release-rollouts/{rolloutID}": {
      "put": {
        "security": [
          {
            "AppToken": [
              "[]"
            ]
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "rollout"
        ],
        "summary": "Update a release flag.",
        "operationId": "updateReleaseRollout",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "RolloutID",
            "description": "RolloutID is the rollout id",
            "name": "rolloutID",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "rollout": {
                  "type": "object",
                  "properties": {
                    "plan": {
                      "type": "object",
                      "x-go-name": "Plan"
                    }
                  },
                  "x-go-name": "Rollout"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/updateReleaseRolloutResponse"
          },
          "400": {
            "$ref": "#/responses/errorResponse"
          },
          "500": {
            "$ref": "#/responses/errorResponse"
          }
        }
      },
      "delete": {
        "security": [
          {
            "AppToken": [
              "[]"
            ]
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "rollout"
        ],
        "summary": "Delete a release rollout.",
        "operationId": "deleteReleaseRollout",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "RolloutID",
            "description": "RolloutID is the rollout id",
            "name": "rolloutID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/deleteReleaseRolloutResponse"
          },
          "400": {
            "$ref": "#/responses/errorResponse"
          },
          "500": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/v/config": {
      "get": {
        "description": "This endpoint especially useful for Mobile \u0026 SPA apps.\nThe endpoint can be called with HTTP GET method as well,\nPOST is used officially only to support most highly abstracted http clients,\nwhere using payload to upload cannot be completed with other http methods.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "pilot"
        ],
        "summary": "Return all the flag states that was requested in the favor of a Pilot.",
        "operationId": "getPilotConfig",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "env",
                "id",
                "release_flags"
              ],
              "properties": {
                "env": {
                  "description": "DeploymentEnvironmentAlias is the ID or the name of the environment where the request being made",
                  "type": "string",
                  "x-go-name": "DeploymentEnvironmentAlias",
                  "example": "Q\u0026A"
                },
                "id": {
                  "description": "PilotExtID is the public uniq id that identify the caller pilot",
                  "type": "string",
                  "x-go-name": "PilotExtID",
                  "example": "pilot-external-id-which-is-uniq-in-the-system"
                },
                "release_flags": {
                  "description": "ReleaseFlags are the list of private release flag name that should be matched against the pilot and state the enrollment for each.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-go-name": "ReleaseFlags",
                  "example": [
                    "my-release-flag"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getPilotConfigResponse"
          },
          "400": {
            "$ref": "#/responses/errorResponse"
          },
          "500": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    }
  },
  "definitions": {
    "Environment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/toggler-io/toggler/domains/release"
    },
    "Error": {
      "description": "Error contains the details of the error",
      "type": "object",
      "properties": {
        "code": {
          "description": "The constant code of the error that can be used for localisation",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code",
          "example": 401
        },
        "message": {
          "description": "The message that describe the error to the developer who do the integration.\nNot meant to be propagated to the end-user.\nThe Message may change in the future, it it helps readability,\nplease do not rely on the content in any way other than just reading it.",
          "type": "string",
          "x-go-name": "Message"
        }
      },
      "x-go-package": "github.com/toggler-io/toggler/external/interface/httpintf/httpapi"
    },
    "Flag": {
      "description": "Flag is the basic entity with properties that feature flag holds",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/toggler-io/toggler/domains/release"
    },
    "Pilot": {
      "description": "The Pilot terminology itself means that the user is in charge to try out a given feature,\neven if the user itself is not aware of this role.",
      "type": "object",
      "title": "Pilot is a data entity that represent relation between an external system's user and a feature flag.",
      "properties": {
        "ID": {
          "description": "ID represent the fact that this object will be persistent in the Subject",
          "type": "string"
        },
        "env_id": {
          "description": "EnvironmentID is the ID of the environment where the pilot should be enrolled",
          "type": "string",
          "x-go-name": "EnvironmentID"
        },
        "flag_id": {
          "description": "FlagID is the reference ID that can tell where this user record belongs to.",
          "type": "string",
          "x-go-name": "FlagID"
        },
        "is_participating": {
          "description": "IsParticipating states that whether the pilot for the given flag in a given environment is enrolled, or blacklisted.",
          "type": "boolean",
          "x-go-name": "IsParticipating"
        },
        "public_id": {
          "description": "PublicID is the unique id that connects the entry to the caller services,\nwith this service and able to use A-B/Percentage or Pilot based testings.",
          "type": "string",
          "x-go-name": "PublicID"
        }
      },
      "x-go-package": "github.com/toggler-io/toggler/domains/release"
    },
    "Rollout": {
      "type": "object",
      "properties": {
        "env_id": {
          "type": "string",
          "x-go-name": "EnvironmentID"
        },
        "flag_id": {
          "type": "string",
          "x-go-name": "FlagID"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "plan": {
          "type": "object",
          "x-go-name": "Plan"
        }
      },
      "x-go-package": "github.com/toggler-io/toggler/external/interface/httpintf/httpapi"
    }
  },
  "responses": {
    "createDeploymentEnvironmentResponse": {
      "description": "CreateDeploymentEnvironmentResponse",
      "schema": {
        "type": "object",
        "properties": {
          "environment": {
            "$ref": "#/definitions/Environment"
          }
        }
      }
    },
    "createReleaseFlagResponse": {
      "description": "CreateReleaseFlagResponse",
      "schema": {
        "type": "object",
        "properties": {
          "flag": {
            "$ref": "#/definitions/Flag"
          }
        }
      }
    },
    "createReleasePilotResponse": {
      "description": "CreateReleasePilotResponse",
      "schema": {
        "type": "object",
        "properties": {
          "pilot": {
            "$ref": "#/definitions/Pilot"
          }
        }
      }
    },
    "createReleaseRolloutResponse": {
      "description": "CreateReleaseRolloutResponse",
      "schema": {
        "type": "object",
        "properties": {
          "rollout": {
            "$ref": "#/definitions/Rollout"
          }
        }
      }
    },
    "deleteDeploymentEnvironmentResponse": {
      "description": "DeleteDeploymentEnvironmentResponse"
    },
    "deleteReleaseFlagResponse": {
      "description": "DeleteReleaseFlagResponse"
    },
    "deleteReleasePilotResponse": {
      "description": "DeleteReleasePilotResponse"
    },
    "deleteReleaseRolloutResponse": {
      "description": "DeleteReleaseRolloutResponse"
    },
    "errorResponse": {
      "description": "ErrorResponse will contains a response about request that had some kind of problem.\nThe details will be included in the body.",
      "schema": {
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/definitions/Error"
          }
        }
      }
    },
    "getPilotConfigResponse": {
      "description": "GetPilotConfigResponse returns information about the requester's rollout feature enrollment statuses.",
      "schema": {
        "type": "object",
        "properties": {
          "release": {
            "description": "Release holds information related the release management",
            "type": "object",
            "properties": {
              "flags": {
                "description": "Flags hold the states of the release flags of the client",
                "type": "object",
                "additionalProperties": {
                  "type": "boolean"
                },
                "x-go-name": "Flags"
              }
            },
            "x-go-name": "Release"
          }
        }
      }
    },
    "listDeploymentEnvironmentResponse": {
      "description": "ListDeploymentEnvironmentResponse",
      "schema": {
        "type": "object",
        "properties": {
          "environments": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Environment"
            },
            "x-go-name": "Environments"
          }
        }
      }
    },
    "listReleaseFlagResponse": {
      "description": "ListReleaseFlagResponse",
      "schema": {
        "type": "object",
        "properties": {
          "flags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Flag"
            },
            "x-go-name": "Flags"
          }
        }
      }
    },
    "listReleasePilotResponse": {
      "description": "ListReleasePilotResponse",
      "schema": {
        "type": "object",
        "properties": {
          "pilots": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Pilot"
            },
            "x-go-name": "Pilots"
          }
        }
      }
    },
    "listReleaseRolloutResponse": {
      "description": "ListReleaseRolloutResponse",
      "schema": {
        "type": "object",
        "properties": {
          "rollouts": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Rollout"
            },
            "x-go-name": "Rollouts"
          }
        }
      }
    },
    "updateDeploymentEnvironmentResponse": {
      "description": "UpdateDeploymentEnvironmentResponse",
      "schema": {
        "type": "object",
        "properties": {
          "environment": {
            "$ref": "#/definitions/Environment"
          }
        }
      }
    },
    "updateReleaseFlagResponse": {
      "description": "UpdateReleaseFlagResponse",
      "schema": {
        "type": "object",
        "properties": {
          "flag": {
            "$ref": "#/definitions/Flag"
          }
        }
      }
    },
    "updateReleasePilotResponse": {
      "description": "UpdateReleasePilotResponse",
      "schema": {
        "type": "object",
        "properties": {
          "pilot": {
            "$ref": "#/definitions/Pilot"
          }
        }
      }
    },
    "updateReleaseRolloutResponse": {
      "description": "UpdateReleaseRolloutResponse",
      "schema": {
        "type": "object",
        "properties": {
          "rollout": {
            "type": "object",
            "properties": {
              "plan": {
                "type": "object",
                "x-go-name": "Plan"
              }
            },
            "x-go-name": "Rollout"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "AppKey": {
      "type": "apiKey",
      "name": "X-APP-KEY",
      "in": "header"
    },
    "AppToken": {
      "type": "apiKey",
      "name": "X-APP-TOKEN",
      "in": "header"
    }
  },
  "security": [
    {
      "AppKey": [
        "[]"
      ]
    }
  ]
}